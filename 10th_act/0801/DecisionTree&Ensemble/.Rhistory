setwd("~/Tobigs/0801/DecisionTree&Ensemble")
rm(list=ls())
# apt 가격 데이터 셋
### setwd
setwd("~/Tobigs/0801/DecisionTree&Ensemble")
### packages
if(!require(caret)) install.packages("caret"); library(caret)
if(!require(e1071)) install.packages("e1071"); library(e1071)
if(!require(dplyr)) install.packages("dplyr"); library(dplyr)
### packages
if(!require(caret)) install.packages("caret"); library(caret)
if(!require(e1071)) install.packages("e1071"); library(e1071)
if(!require(dplyr)) install.packages("dplyr"); library(dplyr)
if(!require(lime)) install.packages("lime"); library(lime)
if(!require(lime)) install.packages("lime"); library(lime)
if(!require(mice)) install.packages("mice"); library(mice)
### packages
if(!require(caret)) install.packages("caret"); library(caret)
if(!require(e1071)) install.packages("e1071"); library(e1071)
if(!require(dplyr)) install.packages("dplyr"); library(dplyr)
if(!require(lime)) install.packages("lime"); library(lime)
if(!require(mice)) install.packages("mice"); library(mice)
### data 불러오기
dat = read.csv("dat.csv")
head(dat)
str(dat)
dat$is_cancer = as.factor(dat$is_cancer)
dat <- dat[-1]
### train / test 분할
set.seed(1)
table(dat$is_cancer)
idx = createDataPartition(dat$is_cancer, p = 0.7, list=F)
train = dat[idx,]
test = dat[-idx,]
table(train$is_cancer)
table(test$is_cancer)
str(train)
### randomforest
control = trainControl(method='cv', search='random', number=5,verbose = TRUE)
rf.model <- train(
is_cancer ~ .,
data = train,
tuneLength = 10,
trControl = control,
method="rf")
### randomforest
control = trainControl(method='cv', search='random', number=5,verbose = TRUE)
rf.model <- train(
is_cancer ~ .,
data = train,
tuneLength = 10,
trControl = control,
method="rf")
rf.grid = expand.grid(
.mtry = c(1,3,5)
)
control = trainControl(method='cv', search='grid', number=5,verbose = TRUE)
rf.model <- train(
is_cancer ~ .,
data = test,
tuneGrid = rf.grid,
trControl = control,
method = 'rf'
)
rf.model
pred.rf <- predict(rf.model,test[-31])
confusionMatrix(pred.rf, test[,31])
### randomforest
control = trainControl(method='cv', search='random', number=5,verbose = TRUE)
rf.model <- train(
is_cancer ~ .,
data = train,
tuneLength = 10,
trControl = control,
method="rf")
rf.grid = expand.grid(
.mtry = c(1,3,5)
)
control = trainControl(method='cv', search='grid', number=5,verbose = TRUE)
rf.model <- train(
is_cancer ~ .,
data = test,
tuneGrid = rf.grid,
trControl = control,
method = 'rf'
)
rf.model
pred.rf <- predict(rf.model,test[-31])
confusionMatrix(pred.rf, test[,31])
### randomforest
control = trainControl(method='cv', search='random', number=5,verbose = TRUE)
rf.model1 <- train(
is_cancer ~ .,
data = train,
tuneLength = 10,
trControl = control,
method="rf")
rf.grid = expand.grid(
.mtry = c(1,3,5)
)
control = trainControl(method='cv', search='grid', number=5,verbose = TRUE)
rf.model2 <- train(
is_cancer ~ .,
data = test,
tuneGrid = rf.grid,
trControl = control,
method = 'rf'
)
rf.model2
pred.rf <- predict(rf.model2,test[-31])
confusionMatrix(pred.rf, test[,31])
pred.rf <- predict(rf.model1,test[-31])
confusionMatrix(pred.rf, test[,31])
pred.rf <- predict(rf.model1,test[-31])
confusionMatrix(pred.rf, test[,31])
pred.rf <- predict(rf.model2,test[-31])
confusionMatrix(pred.rf, test[,31])
### xgboost
## random 탐색
control = trainControl(method='cv', search='random', number=5,verbose = TRUE)
xgb.model <- train(
is_cancer ~ .,
data = train,
tuneLength = 10,
trControl = control,
method="xgbTree")
xgb.model
pred.xgb <- predict(xgb.model,test[-31])
confusionMatrix(pred.xgb, test[,31])
## 격자 탐색
xgb.grid = expand.grid(
nrounds = c(300,500),
eta = c(0.03,0.05),
gamma = c(3,5),
max_depth = c(4,6),
min_child_weight = c(6,8),
colsample_bytree = c(0.3,0.5),
subsample = c(0.2,0.6)
)
control = trainControl(method='cv', search='grid', number=5,verbose = TRUE)
xgb.model <- train(
is_cancer ~ .,
data = test,
tuneGrid = xgb.grid,
trControl = control,
method = 'xgbTree'
)
pred.xgb <- predict(xgb.model,test[-31])
confusionMatrix(pred.xgb, test[,31])
rm(list=ls())
