glm2=glm(Class~., data = Up_BreastCancer_train, family = binomial)
predict2=as.numeric(predict(glm2, newdata = BreastCancer_test, type = 'response') > 0.5)
result = confusionMatrix(as.factor(predict2), as.factor(BreastCancer_test$Class))
result
accuracy = as.numeric(result$overall['Accuracy'])
acc = acc + accuracy
j=j+1
}
acc_mean = acc / j
print(acc_mean)
break
}
while(1){
acc = 0
j=0
for (i in 1:50) {
idx = createDataPartition(BreastCancer$Class, p=0.7, list=F)
BreastCancer_train = BreastCancer[idx,]
BreastCancer_test = BreastCancer[-idx,]
Up_BreastCancer_train = upSample(subset(BreastCancer_train,select=-Class),BreastCancer_train$Class)
glm2=glm(Class~., data = Up_BreastCancer_train, family = binomial)
predict2=as.numeric(predict(glm2, newdata = BreastCancer_test, type = 'response') > 0.5)
result = confusionMatrix(as.factor(predict2), as.factor(BreastCancer_test$Class))
result
accuracy = as.numeric(result$overall['Accuracy'])
acc = acc + accuracy
j=j+1
}
acc_mean = acc / j
print(acc_mean)
break
}
while(1){
acc = 0
j=0
for (i in 1:50) {
idx = createDataPartition(BreastCancer$Class, p=0.7, list=F)
BreastCancer_train = BreastCancer[idx,]
BreastCancer_test = BreastCancer[-idx,]
Up_BreastCancer_train = upSample(subset(BreastCancer_train,select=-Class),BreastCancer_train$Class)
glm2=glm(Class~., data = Up_BreastCancer_train, family = binomial)
predict2=as.numeric(predict(glm2, newdata = BreastCancer_test, type = 'response') > 0.5)
result = confusionMatrix(as.factor(predict2), as.factor(BreastCancer_test$Class))
result
accuracy = as.numeric(result$overall['Accuracy'])
acc = acc + accuracy
j=j+1
}
acc_mean = acc / j
print(acc_mean)
break
}
while(1){
acc = 0
j=0
for (i in 1:50) {
idx = createDataPartition(BreastCancer$Class, p=0.7, list=F)
BreastCancer_train = BreastCancer[idx,]
BreastCancer_test = BreastCancer[-idx,]
Up_BreastCancer_train = upSample(subset(BreastCancer_train,select=-Class),BreastCancer_train$Class)
glm2=glm(Class~., data = Up_BreastCancer_train, family = binomial)
predict2=as.numeric(predict(glm2, newdata = BreastCancer_test, type = 'response') > 0.5)
result = confusionMatrix(as.factor(predict2), as.factor(BreastCancer_test$Class))
result
accuracy = as.numeric(result$overall['Accuracy'])
acc = acc + accuracy
j=j+1
}
acc_mean = acc / j
print(acc_mean)
break
}
while(1){
acc = 0
j=0
for (i in 1:50) {
idx = createDataPartition(BreastCancer$Class, p=0.7, list=F)
BreastCancer_train = BreastCancer[idx,]
BreastCancer_test = BreastCancer[-idx,]
Up_BreastCancer_train = upSample(subset(BreastCancer_train,select=-Class),BreastCancer_train$Class)
glm2=glm(Class~., data = Up_BreastCancer_train, family = binomial)
predict2=as.numeric(predict(glm2, newdata = BreastCancer_test, type = 'response') > 0.5)
result = confusionMatrix(as.factor(predict2), as.factor(BreastCancer_test$Class))
result
accuracy = as.numeric(result$overall['Accuracy'])
acc = acc + accuracy
j=j+1
}
acc_mean = acc / j
print(acc_mean)
break
}
while(1){
acc = 0
j=0
for (i in 1:50) {
idx = createDataPartition(BreastCancer$Class, p=0.7, list=F)
BreastCancer_train = BreastCancer[idx,]
BreastCancer_test = BreastCancer[-idx,]
Up_BreastCancer_train = upSample(subset(BreastCancer_train,select=-Class),BreastCancer_train$Class)
glm2=glm(Class~., data = Up_BreastCancer_train, family = binomial)
predict2=as.numeric(predict(glm2, newdata = BreastCancer_test, type = 'response') > 0.5)
result = confusionMatrix(as.factor(predict2), as.factor(BreastCancer_test$Class))
result
accuracy = as.numeric(result$overall['Accuracy'])
acc = acc + accuracy
j=j+1
}
acc_mean = acc / j
print(acc_mean)
break
}
load("~/Tobigs/0718/Logistic Classification/psub.RData")
rm(list=ls())
load("~/Tobigs/0718/Logistic Classification/psub.RData")
load("psub.RData")
rm(list=ls())
load("psub.RData")
str(psub)
select1 = colnames(psub)[c('AGEP','SEX','COW','PINCP','SCHL')]
select1 = colnames(psub)['AGEP','SEX','COW','PINCP','SCHL']
select1 = colnames(psub)[c(1)]
select1 = colnames(psub)[c(12)]
select1 = colnames(psub)[c(12,15)]
select1 = colnames(psub)[c(12,15,73)]
select1 = colnames(psub)[c(12,15,71,73)]
clonames(psub)
list(psub)
select1 = colnames(psub)[c(12,15,71,73,psub$PINCP)]
psub$PINCP
select1 = colnames(psub)[c(12,15,71,73)+psub$PINCP]
select1 = colnames(psub)[c(12,15,71,73)+PINCP]
select1 = colnames(psub)[c(12,15,71,73)+'PINCP']
select1 = colnames(psub)[c(12,15,71,73)+c('PINCP')]
select1 = colnames(psub)[c(12,15,71,73,PINCP)]
select1 = colnames(psub)[c(12,15,71,73,'PINCP')]
select1 = colnames(psub)[c(12,15,71,73)]
names(psub)
select1 = colnames(psub)[c(12,15,71,73,108)]
select2 = colnames(psub)[c(12,15,71,108)]
select2 = colnames(psub)[c(12,15,73,108)]
list(psub)
psub$SCHL
str(psub)
alpha = psub$SCHL
alpha
str(alpha)
summary(alpha)
summary(psub$SCHL)
#no high school diploma=1 중졸
#Associate's degree=2 전문학사
#Bachelor's degree=3 학사
#Doctorate degree=4 박사
#GED or alternative credential=5 검정고시
#Master's degree=6 석사
#Professional degree=7 전문학위 (의사/변호사 같은)
#Regular high school diploma=8 고졸
#some college credit, no degree=9 대학 기록 있음, 학위 없음
#3,4,6,7이 학사 이상이다.
psub$bachdeg
#no high school diploma=1 중졸
#Associate's degree=2 전문학사
#Bachelor's degree=3 학사
#Doctorate degree=4 박사
#GED or alternative credential=5 검정고시
#Master's degree=6 석사
#Professional degree=7 전문학위 (의사/변호사 같은)
#Regular high school diploma=8 고졸
#some college credit, no degree=9 대학 기록 있음, 학위 없음
#3,4,6,7이 학사 이상이다.
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){psub$bachdeg=1}
psub$bachdeg
#no high school diploma=1 중졸
#Associate's degree=2 전문학사
#Bachelor's degree=3 학사
#Doctorate degree=4 박사
#GED or alternative credential=5 검정고시
#Master's degree=6 석사
#Professional degree=7 전문학위 (의사/변호사 같은)
#Regular high school diploma=8 고졸
#some college credit, no degree=9 대학 기록 있음, 학위 없음
#3,4,6,7이 학사 이상이다.
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){psub$bachdeg=1}
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){psub$bachdeg=1}
psub$bachdeg
psub$bachdeg=1
psub$bachdeg
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){
psub$bachdeg=1
}
psub$bachdeg
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){
psub$bachdeg=1
}
else{
psub$bachdeg=0
}
else if{
psub$bachdeg=0
}
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){
psub$bachdeg=1
}
else if{
psub$bachdeg=0
}
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){
psub$bachdeg=1
}else{
psub$bachdeg=0
}
if(psub$SCHL==3 || psub$SCHL==4 || psub$SCHL==6 || psub$SCHL==7){
psub$bachdeg=1
} else{
psub$bachdeg=0
}
psub$bachdeg
names(psub)
#no high school diploma=1 중졸
#Associate's degree=2 전문학사
#Bachelor's degree=3 학사
#Doctorate degree=4 박사
#GED or alternative credential=5 검정고시
#Master's degree=6 석사
#Professional degree=7 전문학위 (의사/변호사 같은)
#Regular high school diploma=8 고졸
#some college credit, no degree=9 대학 기록 있음, 학위 없음
#3,4,6,7이 학사 이상이다.
psub$SCHL
#no high school diploma=1 중졸
#Associate's degree=2 전문학사
#Bachelor's degree=3 학사
#Doctorate degree=4 박사
#GED or alternative credential=5 검정고시
#Master's degree=6 석사
#Professional degree=7 전문학위 (의사/변호사 같은)
#Regular high school diploma=8 고졸
#some college credit, no degree=9 대학 기록 있음, 학위 없음
#3,4,6,7이 학사 이상이다.
nuSCHL=as.numeric(psub$SCHL)
nuSCHL
if(as.numeric(psub$SCHL)==3 || as.numeric(psub$SCHL)==4 || as.numeric(psub$SCHL)==6 || as.numeric(psub$SCHL)==7){
psub$bachdeg=1
} else{
psub$bachdeg=0
}
psub$bachdeg
as.numeric(psub$SCHL)
as.numeric(psub$SCHL)[,1]
as.numeric(psub$SCHL)[3]
as.numeric(psub$SCHL)[]
as.numeric(psub$SCHL)=1
alpha=as.numeric(psub$SCHL)
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
psub$bachdeg=psub$bachdeg-1
psub$bachdeg=0
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg=psub$bachdeg-1
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
if(psub$bachdeg==3 || psub$bachdeg==4 || psub$bachdeg==6 || psub$bachdeg==7){
psub$bachdeg=1
} else{
psub$bachdeg=0
}
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
psub$bachdeg<-as.numeric(psub$SCHL)==3
psub$bachdeg
psub$bachdeg<-as.numeric(psub$SCHL)==3,4,6,7
psub$bachdeg<-as.numeric(psub$SCHL)==(3,4,6,7)
psub$bachdeg<-as.numeric(psub$SCHL)==3||as.numeric(psub$SCHL)==4||as.numeric(psub$SCHL)==6||as.numeric(psub$SCHL)==7
psub$bachdeg
psub$bachdeg<-as.numeric(psub$SCHL)==3&&as.numeric(psub$SCHL)==4||as.numeric(psub$SCHL)==6||as.numeric(psub$SCHL)==7
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg=lapply('1','0',psub$bachdeg)
psub$bachdeg=lapply(psub$bachdeg,function(x) gsub('1','0',psub$bachdeg))
psub$bachdeg
install.packages("data.table")
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x=1,0))
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x=1,0)})
psub$bachdeg
psub$bachdeg
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<2,0)})
psub$bachdeg
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<4,0)})
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<4,0)})
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<4,0)})
psub$bachdeg
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<4,0)})
setattr(psub$bachdeg,'class',c('data.table','data.frame'))
library(data.table)
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<4,0)})
setattr(psub$bachdeg,'class',c('data.table','data.frame'))
psub$bachdeg
library(data.table)
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg<-lapply(psub$bachdeg,function(x){replace(x,x<4,0)})
psub$bachdeg
setattr(psub$bachdeg,'class',c('data.table','data.frame'))
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg<-as.data.table(psub$bachdeg,function(x){replace(x,x<4,0)})
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
psub$bachdeg=c(as.numeric(psub$SCHL))
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
if(psub$bachdeg==3 || psub$bachdeg==4 || psub$bachdeg==6 || psub$bachdeg==7){
psub$bachdeg=[1]
} else{
psub$bachdeg=0
}
if(psub$bachdeg==3 || psub$bachdeg==4 || psub$bachdeg==6 || psub$bachdeg==7){
psub$bachdeg=c(1)
} else{
psub$bachdeg=0
}
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
if(psub$bachdeg==3 || psub$bachdeg==4 || psub$bachdeg==6 || psub$bachdeg==7){
psub$bachdeg=c(1)
} else{
psub$bachdeg=c(0)
}
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
if(psub$bachdeg==3){
psub$bachdeg=c(1)
} #else{
if(psub$bachdeg==3){
psub$bachdeg=c(1)
}
if(psub$bachdeg==3){
psub$bachdeg=1
}
if(psub$bachdeg=3){
psub$bachdeg=1
}
if(psub$bachdeg==3)  psub$bachdeg=1
if(psub$bachdeg==3)
psub$bachdeg=1
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
psub$bachdeg[,1]
psub$bachdeg[989]
length(psub$bachdeg)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
psub$bachdeg
psub$bachdeg=as.numeric(psub$SCHL)
psub$bachdeg
str(psub$bachdeg)
psub$bachdeg=as.numeric(psub$SCHL)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
str(psub$bachdeg)
psub$bachdeg=as.factor(psub$bachdeg)
str(psub$bachdeg)
rm(list=ls())
rm(list=ls())
load("psub.RData")
str(psub)
names(psub)
select1 = colnames(psub)[c(12,15,71,73,108)]
select2 = colnames(psub)[c(12,15,73,108)]
summary(psub$SCHL)
psub$bachdeg=as.numeric(psub$SCHL)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
psub$bachdeg=as.factor(psub$bachdeg)
str(psub$bachdeg)
idx = createDataPartition(psub$bachdeg, p=0.7, list=F)
psub_train=psub[idx,]
psub_test=psub[-idx,]
rm(list=ls())
load("psub.RData")
str(psub)
names(psub)
select1 = colnames(psub)[c(12,15,71,73,108)]
select2 = colnames(psub)[c(12,15,73,108)]
formula1 = formula(paste("bachdeg~",paste(select2, collapse=" + ")))
summary(psub$SCHL)
psub$bachdeg=as.numeric(psub$SCHL)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
psub$bachdeg=as.factor(psub$bachdeg)
str(psub$bachdeg)
idx = createDataPartition(psub$bachdeg, p=0.7, list=F)
psub_train=psub[idx,]
psub_test=psub[-idx,]
rm(list=ls())
load("psub.RData")
str(psub)
names(psub)
summary(psub$SCHL)
psub$bachdeg=as.numeric(psub$SCHL)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
psub$bachdeg=as.factor(psub$bachdeg)
str(psub$bachdeg)
names(psub)
select1 = colnames(psub)[c(12,15,73,108,290)]
select2 = colnames(psub)[c(12,15,73,108)]
formula1 = formula(paste("bachdeg~",paste(select2, collapse=" + ")))
psub=psub[select1]
str(psub)
library(caret)
idx = createDataPartition(psub$bachdeg, p=0.7, list=F)
psub_train=psub[idx,]
psub_test=psub[-idx,]
model.glm1 = glm(formula1, psub_train, family = binomial)
pred.glm1 = as.numeric(predict(model.glm1, psub_test, type = "response") > 0.5)
confusionMatrix(as.factor(pred.glm1),as.factor(psub_test$bachdeg))
psub_train_up = upSample(subset(psub_train, select=-bachdeg), psub_train$bachdeg)
formula2 = formula(paste("Class~",paste(select2, collapse=" + ")))
model.glm2 = glm(formula2, psub_train_up, family = binomial)
pred.glm2 = as.numeric(predict(model.glm2, banktest, type = "response") > 0.5)
pred.glm2 = as.numeric(predict(model.glm2, psub_test, type = "response") > 0.5)
confusionMatrix(as.factor(pred.glm2),psub_test$bachdeg)
table(pred.glm2)
table(pred.glm1)
rm(list=ls())
load("psub.RData")
str(psub)
names(psub)
summary(psub$SCHL)
psub$bachdeg=as.numeric(psub$SCHL)
n=length(psub$bachdeg)
for(i in 1:n){
if(psub$bachdeg[i]==3||psub$bachdeg[i]==4||psub$bachdeg[i]==6||psub$bachdeg[i]==7){
psub$bachdeg[i]=1
}else{
psub$bachdeg[i]=0
}
}
psub$bachdeg=as.factor(psub$bachdeg)
str(psub$bachdeg)
select1 = colnames(psub)[c(12,15,73,108,290)]
select2 = colnames(psub)[c(12,15,73,108)]
formula1 = formula(paste("bachdeg~",paste(select2, collapse=" + ")))
psub=psub[select1]
str(psub)
library(caret)
idx = createDataPartition(psub$bachdeg, p=0.7, list=F)
psub_train = psub[idx,]
psub_test = psub[-idx,]
model.glm1 = glm(formula1, psub_train, family = binomial)
pred.glm1 = as.numeric(predict(model.glm1, psub_test, type = "response") > 0.5)
confusionMatrix(as.factor(pred.glm1),as.factor(psub_test$bachdeg))
table(pred.glm1)
psub_train_up = upSample(subset(psub_train, select=-bachdeg), psub_train$bachdeg)
formula2 = formula(paste("Class~",paste(select2, collapse=" + ")))
model.glm2 = glm(formula2, psub_train_up, family = binomial)
pred.glm2 = as.numeric(predict(model.glm2, psub_test, type = "response") > 0.5)
confusionMatrix(as.factor(pred.glm2),psub_test$bachdeg)
table(pred.glm2)
